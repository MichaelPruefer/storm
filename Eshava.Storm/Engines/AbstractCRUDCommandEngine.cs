using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using Eshava.Storm.Extensions;
using Eshava.Storm.Interfaces;
using Eshava.Storm.MetaData;
using Eshava.Storm.MetaData.Models;
using Eshava.Storm.Models;

namespace Eshava.Storm.Engines
{
	internal abstract class AbstractCRUDCommandEngine
	{
		private static Type _patchPropertyType = typeof(KeyValuePair<string, object>);

		protected AbstractCRUDCommandEngine(IObjectGenerator objectGenerator)
		{
			ObjectGenerator = objectGenerator;
		}

		protected IObjectGenerator ObjectGenerator { get; }

		public virtual void ProcessInsertRequest<T>(CommandDefinition<T> commandDefinition) where T : class
		{
			var type = CheckCommandConditions(commandDefinition, "insert");

			var entityTypeResult = EntityCache.GetEntity(type) ?? TypeAnalyzer.AnalyzeType(type);
			if (!entityTypeResult.HasPrimaryKey())
			{
				throw new ArgumentException("At least one key column property must be defined.");
			}

			var properties = GetProperties(new PropertyRequest
			{
				Type = type,
				Entity = commandDefinition.Entity
			});


			var sql = new StringBuilder();
			var sqlColumns = new StringBuilder();
			var sqlValues = new StringBuilder();

			var parameters = new List<KeyValuePair<string, object>>();
			var firstColumn = true;
			foreach (var property in properties)
			{
				if (firstColumn)
				{
					firstColumn = false;
				}
				else
				{
					sqlColumns.Append(",");
					sqlValues.Append(",");
				}

				sqlColumns.Append($"[");
				sqlValues.Append("@");
				if (!property.Prefix.IsNullOrEmpty())
				{
					sqlColumns.Append(property.Prefix);
					sqlValues.Append(property.Prefix);
				}

				sqlColumns.Append($"{property.ColumnName}]");
				sqlValues.Append(property.PropertyInfo.Name);

				parameters.Add(new KeyValuePair<string, object>($"{property.Prefix}{property.PropertyInfo.Name}", property.PropertyInfo.GetValue(property.Entity)));
			}

			sql.Append("INSERT INTO ");
			sql.Append(entityTypeResult.TableName);
			sql.Append("(");
			sql.Append(sqlColumns.ToString());
			sql.AppendLine(")");
			sql.Append("VALUES (");
			sql.Append(sqlValues.ToString());
			sql.AppendLine(");");

			if (entityTypeResult.HasAutoGeneratedPrimaryKey())
			{
				sql.AppendLine(GetLastInsertedPrimaryKeyQuery());
			}
			else
			{
				sql.Append("SELECT @");
				sql.Append(entityTypeResult.GetFirstPrimaryKey().Name);
				sql.AppendLine(";");
			}

			commandDefinition.UpdateCommand(sql.ToString(), parameters);
		}

		public virtual void ProcessUpdateRequest<T>(CommandDefinition<T> commandDefinition, object partialEntity = null, IEnumerable<KeyValuePair<string, object>> patchProperties = null) where T : class
		{
			var type = CheckCommandConditions(commandDefinition, "update", partialEntity, patchProperties);

			var entityTypeResult = EntityCache.GetEntity(type) ?? TypeAnalyzer.AnalyzeType(type);
			var keyColumns = GetKeyColumns(type, partialEntity?.GetType(), patchProperties?.Select(p => p.Key).ToList());

			if (!keyColumns.Any())
			{
				throw new ArgumentException("At least one key column property must be defined.");
			}

			if (partialEntity != default || patchProperties != default)
			{
				commandDefinition.Entity = ObjectGenerator.CreateEmptyInstance<T>();
			}

			var properties = GetProperties(new PropertyRequest
			{
				Type = type,
				Entity = commandDefinition.Entity,
				PartialEntity = partialEntity,
				PatchProperties = patchProperties
			});

			var sql = new StringBuilder();
			var parameters = new List<KeyValuePair<string, object>>();

			sql.Append("UPDATE ");
			sql.AppendLine(entityTypeResult.TableName);
			sql.AppendLine(" SET");

			var firstColumn = true;
			foreach (var property in properties)
			{
				if (SkipPropertyForUpdate(property, keyColumns))
				{
					continue;
				}

				sql.Append("\t");
				if (firstColumn)
				{
					firstColumn = false;
					sql.Append(" ");
				}
				else
				{
					sql.Append(",");
				}

				sql.Append($"[");
				if (!property.Prefix.IsNullOrEmpty())
				{
					sql.Append(property.Prefix);
				}

				sql.Append($"{property.ColumnName}]");
				sql.Append(" = @");

				if (!property.Prefix.IsNullOrEmpty())
				{
					sql.Append(property.Prefix);
				}

				if (property.PropertyInfo == default && property.Entity?.GetType() == _patchPropertyType)
				{
					sql.AppendLine(property.ColumnName);
					parameters.Add(new KeyValuePair<string, object>($"{property.Prefix}{property.ColumnName}", ((KeyValuePair<string, object>)property.Entity).Value));

					continue;
				}

				sql.AppendLine(property.PropertyInfo?.Name);
				parameters.Add(new KeyValuePair<string, object>($"{property.Prefix}{property.PropertyInfo.Name}", property.PropertyInfo.GetValue(property.Entity)));
			}

			AppendWhereCondition(new WhereCondition
			{
				Query = sql,
				TableName = entityTypeResult.TableName,
				Parameters = parameters,
				Properties = keyColumns
			},
			partialEntity ?? commandDefinition.Entity,
			patchProperties);

			commandDefinition.UpdateCommand(sql.ToString(), parameters);
		}

		public virtual void ProcessDeleteRequest<T>(CommandDefinition<T> commandDefinition) where T : class
		{
			var type = CheckCommandConditions(commandDefinition, "delete");
			var entityTypeResult = EntityCache.GetEntity(type) ?? TypeAnalyzer.AnalyzeType(type);
			var keyColumns = GetKeyColumns(type);

			if (!keyColumns.Any())
			{
				throw new ArgumentException("At least one key column property must be defined.");
			}

			var sql = new StringBuilder();
			var parameters = new List<KeyValuePair<string, object>>();

			sql.Append("DELETE FROM ");
			sql.AppendLine(entityTypeResult.TableName);
			AppendWhereCondition(new WhereCondition
			{
				Query = sql,
				TableName = entityTypeResult.TableName,
				Parameters = parameters,
				Properties = keyColumns
			},
			commandDefinition.Entity);

			commandDefinition.UpdateCommand(sql.ToString(), parameters);
		}

		public virtual void ProcessQueryEntityRequest<T>(CommandDefinition<T> commandDefinition, object id) where T : class
		{
			var keyColumns = GetKeyColumns(typeof(T));
			if (keyColumns.Count() == 0)
			{
				throw new NotSupportedException("No key columns available");
			}

			if (id == null
			|| id.GetType().ImplementsIEnumerable()
			|| (keyColumns.Count() == 1 && !id.GetType().IsNoClass())
			|| (keyColumns.Count() > 1 && !id.GetType().IsClass()))
			{
				throw new ArgumentException("Invalid id value");
			}

			var query = $"SELECT * FROM {TypeAnalyzer.GetTableName<T>()}";
			var parameters = new List<KeyValuePair<string, object>>();

			if (keyColumns.Count() == 1)
			{
				var keyColumn = keyColumns.First();
				query += $" WHERE {keyColumn.ColumnName} = @{keyColumn.PropertyInfo.Name}";
				parameters.Add(new KeyValuePair<string, object>(keyColumn.PropertyInfo.Name, id));
			}
			else
			{
				var firstColumn = true;
				foreach (var keyColumn in keyColumns)
				{
					var propertyValue = id.GetType().GetProperty(keyColumn.PropertyInfo.Name).GetValue(id);
					parameters.Add(new KeyValuePair<string, object>(keyColumn.PropertyInfo.Name, propertyValue));

					var prefix = firstColumn ? "WHERE" : "AND";
					query += $" {prefix} {keyColumn.ColumnName} = @{keyColumn.PropertyInfo.Name}";
					firstColumn = false;
				}
			}

			commandDefinition.UpdateCommand(query, parameters);
		}

		protected abstract string GetLastInsertedPrimaryKeyQuery();

		protected Type CheckCommandConditions<T>(CommandDefinition<T> commandDefinition, string action, object partialEntity = null, IEnumerable<KeyValuePair<string, object>> patchProperties = null) where T : class
		{
			var type = typeof(T);

			if (type.IsArray || type.ImplementsIEnumerable())
			{
				throw new ArgumentException($"Entity to {action} must be a single instance. No enumeration or array.");
			}

			if (commandDefinition.Entity == default && partialEntity == default && (patchProperties == default || patchProperties.Count() == 0))
			{
				throw new ArgumentNullException($"Entity to {action} must not be NULL");
			}

			return type;
		}

		protected bool SkipPropertyForUpdate(Models.Property property, IEnumerable<KeyProperty> keyColumns)
		{
			if (keyColumns.Any(key =>
				(
					(key.PropertyInfo != default && property.PropertyInfo != default && key.PropertyInfo.Name == property.PropertyInfo.Name)
					||
					(key.PropertyInfo == default && property.PropertyInfo == default && key.ColumnName == property.ColumnName)
				)
				&& property.Prefix.IsNullOrEmpty()))
			{
				return true;
			}

			return false;
		}

		protected IEnumerable<KeyProperty> GetKeyColumns(Type type, Type partialType = null, IEnumerable<string> patchProperties = null)
		{
			var entityTypeResult = MetaData.Models.EntityCache.GetEntity(type) ?? MetaData.TypeAnalyzer.AnalyzeType(type);

			var keyColumns = new List<KeyProperty>();
			var partialPropertyInfos = partialType?.GetProperties().Where(p => p.CanRead).ToList();

			foreach (var property in entityTypeResult.GetProperties())
			{
				if (!property.IsPrimaryKey)
				{
					continue;
				}

				if (patchProperties != default)
				{
					var patchPropertyInfo = patchProperties.FirstOrDefault(p => p == property.Name);
					if (!patchPropertyInfo.IsNullOrEmpty())
					{
						keyColumns.Add(new KeyProperty
						{
							PropertyInfo = null,
							AutoGenerated = property.AutoGeneratedOption != DatabaseGeneratedOption.None,
							ColumnName = property.ColumnName,
						});
					}

					continue;
				}

				if (partialType == default)
				{
					keyColumns.Add(new KeyProperty
					{
						PropertyInfo = property.PropertyInfo,
						AutoGenerated = property.AutoGeneratedOption != DatabaseGeneratedOption.None,
						ColumnName = property.ColumnName
					});

					continue;
				}

				var partialPropertyInfo = partialPropertyInfos.FirstOrDefault(p => p.Name == property.Name);
				if (partialPropertyInfo != default)
				{
					keyColumns.Add(new KeyProperty
					{
						PropertyInfo = partialPropertyInfo,
						AutoGenerated = property.AutoGeneratedOption != DatabaseGeneratedOption.None,
						ColumnName = property.ColumnName
					});
				}
			}

			return keyColumns;
		}

		protected IEnumerable<Models.Property> GetProperties(PropertyRequest request)
		{
			request.EntityTypeResult = request.EntityTypeResult ?? MetaData.Models.EntityCache.GetEntity(request.Type) ?? MetaData.TypeAnalyzer.AnalyzeType(request.Type);
			var properties = new List<Models.Property>();
			var propertyInfosPartial = request.PartialEntity?.GetType().GetProperties().Where(p => p.CanRead).ToList();

			foreach (var property in request.EntityTypeResult.GetProperties())
			{
				if (property.IsReadOnly)
				{
					continue;
				}

				if (property.IsNoClass)
				{
					if (property.AutoGeneratedOption != DatabaseGeneratedOption.None)
					{
						continue;
					}

					if (request.PatchProperties != default)
					{
						var patchPropertyInfo = request.PatchProperties.FirstOrDefault(p => p.Key == request.NamePrefix + property.Name);
						if (!patchPropertyInfo.Key.IsNullOrEmpty())
						{
							properties.Add(new Models.Property
							{
								Prefix = request.NamePrefix,
								PropertyInfo = null,
								Entity = patchPropertyInfo,
								ColumnName = property.ColumnName
							});
						}
					}
					else if (request.PartialEntity == default)
					{
						properties.Add(new Models.Property
						{
							Prefix = request.NamePrefix,
							PropertyInfo = property.PropertyInfo,
							Entity = request.Entity,
							ColumnName = property.ColumnName
						});
					}
					else
					{
						var partialPropertyInfo = propertyInfosPartial.FirstOrDefault(p => p.Name == property.Name);
						if (partialPropertyInfo != default)
						{
							properties.Add(new Models.Property
							{
								Prefix = request.NamePrefix,
								PropertyInfo = partialPropertyInfo,
								Entity = request.PartialEntity,
								ColumnName = property.ColumnName
							});
						}
					}

					continue;
				}

				if (property.IsOwnsOne)
				{
					var ownsOneEntity = property.PropertyInfo.GetValue(request.Entity);

					if (request.PatchProperties != default)
					{
						var exists = request.PatchProperties.Any(pp => pp.Key.StartsWith($"{request.NamePrefix}{property.Name}_"));
						if (exists)
						{
							properties.AddRange(GetProperties(new PropertyRequest
							{
								Type = property.Type,
								Entity = ownsOneEntity,
								NamePrefix = $"{request.NamePrefix}{property.Name}_",
								PatchProperties = request.PatchProperties,
								EntityTypeResult = property.OwnsOne
							}));
						}

						continue;
					}

					if (request.PartialEntity == default)
					{
						if (ownsOneEntity == default)
						{
							continue;
						}

						properties.AddRange(GetProperties(new PropertyRequest
						{
							Type = property.Type,
							Entity = ownsOneEntity,
							NamePrefix = $"{request.NamePrefix}{property.Name}_",
							EntityTypeResult = property.OwnsOne
						}));

						continue;
					}

					var partialPropertyInfo = propertyInfosPartial.FirstOrDefault(p => p.Name == property.Name);
					if (partialPropertyInfo == default)
					{
						continue;
					}

					var ownsOneEntityPartial = partialPropertyInfo.GetValue(request.PartialEntity);
					if (ownsOneEntityPartial == default)
					{
						continue;
					}

					properties.AddRange(GetProperties(new PropertyRequest
					{
						Type = property.Type,
						Entity = ownsOneEntity,
						NamePrefix = $"{request.NamePrefix}{property.Name}_",
						PartialEntity = ownsOneEntityPartial,
						EntityTypeResult = property.OwnsOne
					}));

					continue;
				}

				if (TypeHandlerMap.Map.ContainsKey(property.Type.GetDataType()))
				{
					if (request.PatchProperties != default)
					{
						var patchPropertyInfo = request.PatchProperties.FirstOrDefault(p => p.Key == request.NamePrefix + property.Name);
						if (!patchPropertyInfo.Key.IsNullOrEmpty())
						{
							properties.Add(new Models.Property
							{
								Prefix = request.NamePrefix,
								PropertyInfo = null,
								Entity = patchPropertyInfo,
								ColumnName = property.ColumnName
							});
						}

						continue;
					}

					if (request.PartialEntity == default)
					{
						properties.Add(new Models.Property
						{
							Prefix = request.NamePrefix,
							PropertyInfo = property.PropertyInfo,
							Entity = request.Entity,
							TypeHandler = TypeHandlerMap.Map[property.Type.GetDataType()],
							ColumnName = property.ColumnName
						});

						continue;
					}

					var partialPropertyInfo = propertyInfosPartial.FirstOrDefault(p => p.Name == property.Name);
					if (partialPropertyInfo != default)
					{
						properties.Add(new Models.Property
						{
							Prefix = request.NamePrefix,
							PropertyInfo = partialPropertyInfo,
							Entity = request.PartialEntity,
							ColumnName = property.ColumnName
						});
					}
				}
			}

			return properties;
		}

		private void AppendWhereCondition(WhereCondition condition, object entity, IEnumerable<KeyValuePair<string, object>> patchProperties = null)
		{
			condition.Query.Append("WHERE ");

			var firstKey = true;
			foreach (var property in condition.Properties)
			{
				if (firstKey)
				{
					firstKey = false;
				}
				else
				{
					condition.Query.Append("AND ");
				}

				condition.Query.Append(condition.TableName);
				condition.Query.Append(".");
				condition.Query.Append(property.ColumnName);
				if (property.PropertyInfo?.PropertyType.ImplementsIEnumerable() ?? false
					|| (patchProperties != default && patchProperties.First(p => p.Key == property.ColumnName).Value.GetType().ImplementsIEnumerable()))
				{
					condition.Query.Append(" IN @");
				}
				else
				{
					condition.Query.Append(" = @");
				}

				if (property.PropertyInfo == default)
				{
					condition.Query.AppendLine(property.ColumnName);

					condition.Parameters.Add(new KeyValuePair<string, object>(property.ColumnName, patchProperties.First(p => p.Key == property.ColumnName).Value));
				}
				else
				{
					condition.Query.AppendLine(property.PropertyInfo.Name);

					condition.Parameters.Add(new KeyValuePair<string, object>(property.PropertyInfo.Name, property.PropertyInfo.GetValue(entity)));
				}

			}
		}
	}
}