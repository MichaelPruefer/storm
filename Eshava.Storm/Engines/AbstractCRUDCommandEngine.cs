using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Reflection;
using Eshava.Storm.Extensions;
using Eshava.Storm.Models;

namespace Eshava.Storm.Engines
{
	internal abstract class AbstractCRUDCommandEngine
	{
		protected bool SkipPropertyForInsert(Property property, IEnumerable<KeyProperty> keyColumns)
		{
			if (keyColumns.Any(key =>
					   key.PropertyInfo.Name == property.PropertyInfo.Name
					&& property.Prefix.IsNullOrEmpty()
					&& key.AutoGenerated))
			{
				return true;
			}

			return false;
		}

		protected bool SkipPropertyForUpdate(Property property, IEnumerable<KeyProperty> keyColumns)
		{
			if (keyColumns.Any(key =>
					key.PropertyInfo.Name == property.PropertyInfo.Name
				&& property.Prefix.IsNullOrEmpty()))
			{
				return true;
			}

			return false;
		}

		protected IEnumerable<KeyProperty> GetKeyColumns(Type type, Type partialType = null)
		{
			var keyColumns = new List<KeyProperty>();
			var propertyInfos = type.GetProperties().Where(p => p.CanRead).ToList();
			var partialPropertyInfos = partialType?.GetProperties().Where(p => p.CanRead).ToList();

			foreach (var propertyInfo in propertyInfos)
			{
				if (!propertyInfo.IsPrímaryKey())
				{
					continue;
				}

				if (partialType == default)
				{
					keyColumns.Add(new KeyProperty
					{
						PropertyInfo = propertyInfo,
						AutoGenerated = HasAutoGeneratedValue(propertyInfo)
					});

					continue;
				}

				var partialPropertyInfo = partialPropertyInfos.FirstOrDefault(p => p.Name == propertyInfo.Name);
				if (partialPropertyInfo != default)
				{
					keyColumns.Add(new KeyProperty
					{
						PropertyInfo = partialPropertyInfo,
						AutoGenerated = HasAutoGeneratedValue(propertyInfo)
					});
				}
			}

			if (keyColumns.Any())
			{
				return keyColumns;
			}

			foreach (var propertyInfo in propertyInfos)
			{
				if (propertyInfo.Name.ToLower() != "id")
				{
					continue;
				}

				if (partialType == default)
				{
					keyColumns.Add(new KeyProperty
					{
						PropertyInfo = propertyInfo,
						AutoGenerated = HasAutoGeneratedValue(propertyInfo)
					});

					break;
				}

				var partialPropertyInfo = partialPropertyInfos.FirstOrDefault(p => p.Name == propertyInfo.Name);
				if (partialPropertyInfo != default)
				{
					keyColumns.Add(new KeyProperty
					{
						PropertyInfo = partialPropertyInfo,
						AutoGenerated = HasAutoGeneratedValue(propertyInfo)
					});
				}

				break;
			}

			return keyColumns;
		}

		protected IEnumerable<Property> GetProperties(Type type, object entity, string namePrefix = null, object partialEntity = null)
		{
			var properties = new List<Property>();
			var propertyInfos = type.GetProperties().Where(p => p.CanRead).ToList();
			var propertyInfosPartial = partialEntity?.GetType().GetProperties().Where(p => p.CanRead).ToList();

			foreach (var propertyInfo in propertyInfos)
			{
				var propertyType = propertyInfo.PropertyType.GetDataType();

				if (propertyType.IsNoClass())
				{
					if (propertyInfo.IsAutoGenerated())
					{
						continue;
					}

					if (partialEntity == default)
					{
						properties.Add(new Property
						{
							Prefix = namePrefix,
							PropertyInfo = propertyInfo,
							Entity = entity
						});
					}
					else
					{
						var partialPropertyInfo = propertyInfosPartial.FirstOrDefault(p => p.Name == propertyInfo.Name);
						if (partialPropertyInfo != default)
						{
							properties.Add(new Property
							{
								Prefix = namePrefix,
								PropertyInfo = partialPropertyInfo,
								Entity = partialEntity
							});
						}
					}

					continue;
				}

				if (!propertyType.IsClass())
				{
					continue;
				}

				if (propertyInfo.IsOwnsOne())
				{
					var ownsOneEntity = propertyInfo.GetValue(entity);

					if (partialEntity == default)
					{
						if (ownsOneEntity == default)
						{
							continue;
						}

						properties.AddRange(GetProperties(propertyInfo.PropertyType, ownsOneEntity, $"{namePrefix}{propertyInfo.Name}_"));

						continue;
					}

					var partialPropertyInfo = propertyInfosPartial.FirstOrDefault(p => p.Name == propertyInfo.Name);
					if (partialPropertyInfo == default)
					{
						continue;
					}

					var ownsOneEntityPartial = partialPropertyInfo.GetValue(partialEntity);
					if (ownsOneEntityPartial == default)
					{
						continue;
					}

					properties.AddRange(GetProperties(propertyInfo.PropertyType, ownsOneEntity, $"{namePrefix}{propertyInfo.Name}_", ownsOneEntityPartial));

					continue;
				}

				propertyInfo.PropertyType.LookupDbType("", false, out var _);
				if (TypeHandlerMap.Map.ContainsKey(propertyInfo.PropertyType))
				{
					if (partialEntity == default)
					{
						properties.Add(new Property
						{
							Prefix = namePrefix,
							PropertyInfo = propertyInfo,
							Entity = entity,
							TypeHandler = TypeHandlerMap.Map[propertyInfo.PropertyType]
						});

						continue;
					}

					var partialPropertyInfo = propertyInfosPartial.FirstOrDefault(p => p.Name == propertyInfo.Name);
					if (partialPropertyInfo != default)
					{
						properties.Add(new Property
						{
							Prefix = namePrefix,
							PropertyInfo = partialPropertyInfo,
							Entity = partialEntity
						});
					}
				}
			}

			return properties;
		}

		protected (string Column, string Property) GetColumnName(PropertyInfo propertyInfo)
		{
			return (propertyInfo.GetColumnName(), propertyInfo.Name);
		}

		protected string GetTableName(Type type)
		{
			var tableAttribute = type.GetCustomAttribute<TableAttribute>();

			if (tableAttribute != default)
			{
				if (!tableAttribute.Schema.IsNullOrEmpty())
				{
					return $"[{tableAttribute.Schema}].[{tableAttribute.Name}]";
				}

				return $"[{tableAttribute.Name}]";
			}

			if (type.Name.ToLower().EndsWith("y"))
			{
				return $"[{type.Name.Substring(0, type.Name.Length - 1)}ies]";
			}

			if (type.Name.ToLower().EndsWith("s") || type.Name.ToLower().EndsWith("x"))
			{
				return $"[{type.Name}es]";
			}

			return $"[{type.Name}s]";
		}

		private bool HasAutoGeneratedValue(PropertyInfo propertyInfo)
		{
			var databaseGenerated = propertyInfo.GetCustomAttribute<DatabaseGeneratedAttribute>();
			if (databaseGenerated != default)
			{
				return databaseGenerated.DatabaseGeneratedOption != DatabaseGeneratedOption.None;
			}

			return Settings.DefaultKeyColumnValueGeneration != DatabaseGeneratedOption.None;
		}
	}
}