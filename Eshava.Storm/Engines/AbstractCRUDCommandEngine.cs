using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using Eshava.Storm.Extensions;
using Eshava.Storm.Models;

namespace Eshava.Storm.Engines
{
	internal abstract class AbstractCRUDCommandEngine
	{
		protected bool SkipPropertyForUpdate(Property property, IEnumerable<KeyProperty> keyColumns)
		{
			if (keyColumns.Any(key =>
					key.PropertyInfo.Name == property.PropertyInfo.Name
				&& property.Prefix.IsNullOrEmpty()))
			{
				return true;
			}

			return false;
		}

		protected IEnumerable<KeyProperty> GetKeyColumns(Type type, Type partialType = null)
		{
			var entityTypeResult = MetaData.Models.EntityCache.GetEntity(type) ?? MetaData.TypeAnalyzer.AnalyzeType(type);

			var keyColumns = new List<KeyProperty>();
			var partialPropertyInfos = partialType?.GetProperties().Where(p => p.CanRead).ToList();

			foreach (var property in entityTypeResult.GetProperties())
			{
				if (!property.IsPrimaryKey)
				{
					continue;
				}

				if (partialType == default)
				{
					keyColumns.Add(new KeyProperty
					{
						PropertyInfo = property.PropertyInfo,
						AutoGenerated = property.AutoGeneratedOption != DatabaseGeneratedOption.None,
						ColumnName = property.ColumnName
					});

					continue;
				}

				var partialPropertyInfo = partialPropertyInfos.FirstOrDefault(p => p.Name == property.Name);
				if (partialPropertyInfo != default)
				{
					keyColumns.Add(new KeyProperty
					{
						PropertyInfo = partialPropertyInfo,
						AutoGenerated = property.AutoGeneratedOption != DatabaseGeneratedOption.None,
						ColumnName = property.ColumnName
					});
				}
			}

			return keyColumns;
		}

		protected IEnumerable<Property> GetProperties(PropertyRequest request)
		{
			request.EntityTypeResult = request.EntityTypeResult ?? MetaData.Models.EntityCache.GetEntity(request.Type) ?? MetaData.TypeAnalyzer.AnalyzeType(request.Type);
			var properties = new List<Property>();
			var propertyInfosPartial = request.PartialEntity?.GetType().GetProperties().Where(p => p.CanRead).ToList();

			foreach (var property in request.EntityTypeResult.GetProperties())
			{
				if (property.IsReadOnly)
				{
					continue;
				}

				if (property.IsNoClass)
				{
					if (property.AutoGeneratedOption != DatabaseGeneratedOption.None)
					{
						continue;
					}

					if (request.PartialEntity == default)
					{
						properties.Add(new Property
						{
							Prefix = request.NamePrefix,
							PropertyInfo = property.PropertyInfo,
							Entity = request.Entity,
							ColumnName = property.ColumnName
						});
					}
					else
					{
						var partialPropertyInfo = propertyInfosPartial.FirstOrDefault(p => p.Name == property.Name);
						if (partialPropertyInfo != default)
						{
							properties.Add(new Property
							{
								Prefix = request.NamePrefix,
								PropertyInfo = partialPropertyInfo,
								Entity = request.PartialEntity,
								ColumnName = property.ColumnName
							});
						}
					}

					continue;
				}

				if (property.IsOwnsOne)
				{
					var ownsOneEntity = property.PropertyInfo.GetValue(request.Entity);

					if (request.PartialEntity == default)
					{
						if (ownsOneEntity == default)
						{
							continue;
						}



						properties.AddRange(GetProperties(new PropertyRequest
						{
							Type = property.Type,
							Entity = ownsOneEntity,
							NamePrefix = $"{request.NamePrefix}{property.Name}_",
							EntityTypeResult = property.OwnsOne
						}));

						continue;
					}

					var partialPropertyInfo = propertyInfosPartial.FirstOrDefault(p => p.Name == property.Name);
					if (partialPropertyInfo == default)
					{
						continue;
					}

					var ownsOneEntityPartial = partialPropertyInfo.GetValue(request.PartialEntity);
					if (ownsOneEntityPartial == default)
					{
						continue;
					}

					properties.AddRange(GetProperties(new PropertyRequest
					{
						Type = property.Type,
						Entity = ownsOneEntity,
						NamePrefix = $"{request.NamePrefix}{property.Name}_",
						PartialEntity = ownsOneEntityPartial,
						EntityTypeResult = property.OwnsOne
					}));

					continue;
				}

				if (TypeHandlerMap.Map.ContainsKey(property.Type))
				{
					if (request.PartialEntity == default)
					{
						properties.Add(new Property
						{
							Prefix = request.NamePrefix,
							PropertyInfo = property.PropertyInfo,
							Entity = request.Entity,
							TypeHandler = TypeHandlerMap.Map[property.Type],
							ColumnName = property.ColumnName
						});

						continue;
					}

					var partialPropertyInfo = propertyInfosPartial.FirstOrDefault(p => p.Name == property.Name);
					if (partialPropertyInfo != default)
					{
						properties.Add(new Property
						{
							Prefix = request.NamePrefix,
							PropertyInfo = partialPropertyInfo,
							Entity = request.PartialEntity,
							ColumnName = property.ColumnName
						});
					}
				}
			}

			return properties;
		}
	}
}