using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Eshava.Storm.Extensions;
using Eshava.Storm.Interfaces;
using Eshava.Storm.MetaData;
using Eshava.Storm.MetaData.Models;
using Eshava.Storm.Models;

namespace Eshava.Storm.Engines
{
	internal class SqliteCRUDCommandEngine : AbstractCRUDCommandEngine, ICRUDCommandEngine
	{
		public SqliteCRUDCommandEngine(
			IObjectGenerator objectGenerator
		) : base(objectGenerator)
		{
		}

		public override void ProcessInsertRequest<T>(CommandDefinition<T> commandDefinition) where T : class
		{
			var type = CheckCommandConditions(commandDefinition, "insert");

			var entityTypeResult = EntityCache.GetEntity(type) ?? TypeAnalyzer.AnalyzeType(type);
			if (!entityTypeResult.HasPrimaryKey())
			{
				throw new ArgumentException("At least one key column property must be defined.");
			}

			var properties = GetProperties(new PropertyRequest
			{
				Type = type,
				Entity = commandDefinition.Entity
			});


			var sql = new StringBuilder();
			var sqlColumns = new StringBuilder();
			var sqlValues = new StringBuilder();

			var parameters = new List<KeyValuePair<string, object>>();
			var firstColumn = true;
			foreach (var property in properties)
			{
				if (firstColumn)
				{
					firstColumn = false;
				}
				else
				{
					sqlColumns.Append(",");
					sqlValues.Append(",");
				}

				sqlColumns.Append($"[");
				sqlValues.Append("@");
				if (!property.Prefix.IsNullOrEmpty())
				{
					sqlColumns.Append(property.Prefix);
					sqlValues.Append(property.Prefix);
				}

				sqlColumns.Append($"{property.ColumnName}]");
				sqlValues.Append(property.PropertyInfo.Name);

				parameters.Add(new KeyValuePair<string, object>($"{property.Prefix}{property.PropertyInfo.Name}", property.PropertyInfo.GetValue(property.Entity)));
			}

			sql.Append("INSERT INTO ");
			sql.Append(entityTypeResult.TableName);
			sql.Append("(");
			sql.Append(sqlColumns.ToString());
			sql.AppendLine(")");
			sql.Append("VALUES (");
			sql.Append(sqlValues.ToString());
			sql.AppendLine(");");

			if (entityTypeResult.HasAutoGeneratedPrimaryKey())
			{
				sql.AppendLine("SELECT last_insert_rowid();");
			}
			else
			{
				sql.Append("SELECT @");
				sql.Append(entityTypeResult.GetFirstPrimaryKey().Name);
				sql.AppendLine(";");
			}

			commandDefinition.UpdateCommand(sql.ToString(), parameters);
		}
	}
}
