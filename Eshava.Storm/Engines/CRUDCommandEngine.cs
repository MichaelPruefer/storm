using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Eshava.Storm.Extensions;
using Eshava.Storm.Interfaces;
using Eshava.Storm.Models;

namespace Eshava.Storm.Engines
{
	internal class CRUDCommandEngine : AbstractCRUDCommandEngine
	{
		private readonly IObjectGenerator _objectGenerator;

		public CRUDCommandEngine(IObjectGenerator objectGenerator)
		{
			_objectGenerator = objectGenerator;
		}

		public void ProcessInsertRequest<T>(CommandDefinition<T> commandDefinition) where T : class
		{
			var type = CheckCommandConditions(commandDefinition, "insert");
			var tableName = GetTableName(type);
			var keyColumns = GetKeyColumns(type);

			if (!keyColumns.Any())
			{
				throw new ArgumentException("At least one key column property must be defined.");
			}

			var properties = GetProperties(type, commandDefinition.Entity);

			var sql = new StringBuilder();
			var sqlColumns = new StringBuilder();
			var sqlValues = new StringBuilder();

			var parameters = new List<KeyValuePair<string, object>>();
			var firstColumn = true;
			foreach (var property in properties)
			{
				if (SkipPropertyForInsert(property, keyColumns))
				{
					continue;
				}

				if (firstColumn)
				{
					firstColumn = false;
				}
				else
				{
					sqlColumns.Append(",");
					sqlValues.Append(",");
				}

				sqlValues.Append("@");
				if (!property.Prefix.IsNullOrEmpty())
				{
					sqlColumns.Append(property.Prefix);
					sqlValues.Append(property.Prefix);
				}

				var columnName = GetColumnName(property.PropertyInfo);
				sqlColumns.Append(columnName.Column);
				sqlValues.Append(columnName.Property);

				parameters.Add(new KeyValuePair<string, object>($"{property.Prefix}{columnName.Property}", property.PropertyInfo.GetValue(property.Entity)));
			}

			sql.Append("INSERT INTO ");
			sql.Append(tableName);
			sql.Append("(");
			sql.Append(sqlColumns.ToString());
			sql.AppendLine(")");
			sql.Append("VALUES (");
			sql.Append(sqlValues.ToString());
			sql.AppendLine(");");

			if (keyColumns.Count() == 1 && keyColumns.First().AutoGenerated)
			{
				sql.AppendLine("SELECT SCOPE_IDENTITY();");
			}
			else
			{
				sql.Append("SELECT @");
				sql.Append(keyColumns.First().PropertyInfo.Name);
				sql.AppendLine(";");
			}

			commandDefinition.UpdateCommand(sql.ToString(), parameters);
		}

		public void ProcessUpdateRequest<T>(CommandDefinition<T> commandDefinition, object partialEntity = null) where T : class
		{
			var type = CheckCommandConditions(commandDefinition, "update", partialEntity);
			var tableName = GetTableName(type);
			var keyColumns = GetKeyColumns(type, partialEntity?.GetType());

			if (!keyColumns.Any())
			{
				throw new ArgumentException("At least one key column property must be defined.");
			}

			if (partialEntity != default)
			{
				commandDefinition.Entity = _objectGenerator.CreateEmptyInstance<T>();
			}

			var properties = GetProperties(type, commandDefinition.Entity, partialEntity: partialEntity);

			var sql = new StringBuilder();
			var parameters = new List<KeyValuePair<string, object>>();

			sql.Append("UPDATE ");
			sql.AppendLine(tableName);
			sql.AppendLine(" SET");

			var firstColumn = true;
			foreach (var property in properties)
			{
				if (SkipPropertyForUpdate(property, keyColumns))
				{
					continue;
				}

				sql.Append("\t");
				if (firstColumn)
				{
					firstColumn = false;
					sql.Append(" ");
				}
				else
				{
					sql.Append(",");
				}

				if (!property.Prefix.IsNullOrEmpty())
				{
					sql.Append(property.Prefix);
				}

				var columnName = GetColumnName(property.PropertyInfo);

				sql.Append(columnName.Column);
				sql.Append(" = @");

				if (!property.Prefix.IsNullOrEmpty())
				{
					sql.Append(property.Prefix);
				}
				sql.AppendLine(columnName.Property);

				parameters.Add(new KeyValuePair<string, object>($"{property.Prefix}{columnName.Property}", property.PropertyInfo.GetValue(property.Entity)));
			}

			AppendWhereCondition(new WhereCondition
			{
				Query = sql,
				TableName = tableName,
				Parameters = parameters,
				Properties = keyColumns
			},
			partialEntity ?? commandDefinition.Entity);

			commandDefinition.UpdateCommand(sql.ToString(), parameters);
		}

		public void ProcessDeleteRequest<T>(CommandDefinition<T> commandDefinition) where T : class
		{
			var type = CheckCommandConditions(commandDefinition, "delete");
			var tableName = GetTableName(type);
			var keyColumns = GetKeyColumns(type);

			if (!keyColumns.Any())
			{
				throw new ArgumentException("At least one key column property must be defined.");
			}

			var sql = new StringBuilder();
			var parameters = new List<KeyValuePair<string, object>>();

			sql.Append("DELETE FROM ");
			sql.AppendLine(tableName);
			AppendWhereCondition(new WhereCondition
			{
				Query = sql,
				TableName = tableName,
				Parameters = parameters,
				Properties = keyColumns
			},
			commandDefinition.Entity);

			commandDefinition.UpdateCommand(sql.ToString(), parameters);
		}

		private void AppendWhereCondition(WhereCondition condition, object entity)
		{
			condition.Query.Append("WHERE ");

			var firstKey = true;
			foreach (var property in condition.Properties)
			{
				if (firstKey)
				{
					firstKey = false;
				}
				else
				{
					condition.Query.Append("AND ");
				}

				var columnName = GetColumnName(property.PropertyInfo);

				condition.Query.Append(condition.TableName);
				condition.Query.Append(".");
				condition.Query.Append(columnName.Column);
				condition.Query.Append(" = @");
				condition.Query.AppendLine(columnName.Property);

				condition.Parameters.Add(new KeyValuePair<string, object>(columnName.Property, property.PropertyInfo.GetValue(entity)));
			}
		}

		private Type CheckCommandConditions<T>(CommandDefinition<T> commandDefinition, string action, object partialEntity = null) where T : class
		{
			var type = typeof(T);

			if (type.IsArray || type.ImplementsIEnumerable())
			{
				throw new ArgumentException($"Entity to {action} must be a single instance. No enumeration or array.");
			}

			if (commandDefinition.Entity == default && partialEntity == default)
			{
				throw new ArgumentNullException($"Entity to {action} must not be NULL");
			}

			return type;
		}
	}
}